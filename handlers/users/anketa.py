from aiogram import types
from aiogram.dispatcher import FSMContext
import aiogram.utils.markdown as md
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ParseMode, ReplyKeyboardRemove, CallbackQuery
import re

from keyboards.default import work_experience
from loader import dp
from keyboards.default.hours_per_week import hours_per_week
from keyboards.default.can_continue_work import can_continue_work
from keyboards.default.education import education
from keyboards.default.find_out_about_naumen import find_out_about_naumen
from keyboards.default.choose_directions import choose_directions

# SERVICE_ACCOUNT_FILE = '/home/dmitrii/TemplateTelegramBot/handlers/users/key.json'
# SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
#
# creds = None
# creds = service_account.Credentials.from_service_account_file(
#     SERVICE_ACCOUNT_FILE, scopes=SCOPES)
#
# SAMPLE_SPREADSHEET_ID = '1mHujKDGeNAh4o6LmEUgyh0P3ZTP0l6qrdVSX5fVBSHU'
#
# service = build('sheets', 'v4', credentials=creds)
#
# # Call the Sheets API
# sheet = service.spreadsheets()


class Anketa(StatesGroup):
    direction = State()
    lastname = State()
    firstname = State()
    patronymic = State()
    date_of_birth = State()
    city = State()
    email = State()
    phone_number = State()
    hours_per_week = State()
    date_of_start = State()
    can_continue_work = State()
    education = State()
    name_of_institution = State()
    year_of_receipt = State()
    year_of_graduation = State()
    faculty = State()
    average_score = State()
    work_experience = State()
    period_of_work = State()
    place_of_work = State()
    post = State()
    duties = State()
    participation_in_projects = State()
    participation_in_educational_programs = State()
    main_skills = State()
    professional_interests = State()
    last_professional_book = State()
    hobby = State()
    result_of_practice = State()
    want_post = State()
    find_out_about_naumen = State()
    find_out_about_internship = State()
    recommendation = State()
    resume = State()
    test_task = State()
    confirm = State()


@dp.message_handler(state="*", commands=['cancel'])
@dp.message_handler(Text(equals='cancel', ignore_case=True), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@dp.callback_query_handler(text_contains="enter")
async def start_anketa(call: CallbackQuery):
    await Anketa.direction.set()
    await call.message.answer("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: \n"
                              "üîª - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –æ—Ç–≤–µ—Ç—É.\n"
                              "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n"
                              "–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, —Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫. (-)")
    await call.message.answer("üîª –ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ", reply_markup=choose_directions)


@dp.message_handler(state=Anketa.direction)
async def process_direction(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['direction'] = message.text

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}", reply_markup=ReplyKeyboardRemove())
    await Anketa.next()
    await message.answer("üîª –§–∞–º–∏–ª–∏—è:")


@dp.message_handler(state=Anketa.lastname)
async def process_lastname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['lastname'] = message.text

    await Anketa.next()
    await message.answer("üîª –ò–º—è:")


@dp.message_handler(state=Anketa.firstname)
async def process_firstname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['firstname'] = message.text

    await Anketa.next()
    await message.answer("üîª –û—Ç—á–µ—Å—Ç–≤–æ:")


@dp.message_handler(state=Anketa.patronymic)
async def process_patronymic(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['patronymic'] = message.text

    await Anketa.next()
    await message.answer("üîª –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: 07.12.1970)")


@dp.message_handler(state=Anketa.date_of_birth)
async def process_date_of_birth(message: types.Message, state: FSMContext):
    date_of_birth = message.text
    if not re.match(r"^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$", date_of_birth):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 07.12.1970")
        return

    async with state.proxy() as data:
        data['date_of_birth'] = message.text

    await Anketa.next()
    await message.answer("üîª –ì–æ—Ä–æ–¥:")


@dp.message_handler(state=Anketa.city)
async def process_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = str(message.text)

    await Anketa.next()
    await message.answer("üîª E-mail: ")


@dp.message_handler(state=Anketa.email)
async def process_email(message: types.Message, state: FSMContext):
    email = str(message.text)
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –ø–æ—á—Ç—É. –ü—Ä–∏–º–µ—Ä: naumen@mail.ru")
        return

    async with state.proxy() as data:
        data['email'] = email

    await Anketa.next()
    await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: +79123456789)")


@dp.message_handler(state=Anketa.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text
    if not re.match(r"^((\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$", phone_number):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: +79123456789")
        return

    async with state.proxy() as data:
        data['phone_number'] = phone_number

    await Anketa.next()
    await message.answer("üîª –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é —Å–º–æ–∂–µ—à—å —É–¥–µ–ª—è—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ?", reply_markup=hours_per_week)


@dp.message_handler(state=Anketa.hours_per_week)
async def process_hours_per_week(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['hours_per_week'] = message.text

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}", reply_markup=ReplyKeyboardRemove())
    await Anketa.next()
    await message.answer("üîª –ö–æ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ? (–§–æ—Ä–º–∞—Ç: 07.12.2021)")


@dp.message_handler(state=Anketa.date_of_start)
async def process_date_of_start(message: types.Message, state: FSMContext):
    date_of_start = message.text
    if not re.match(r"^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$", date_of_start):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 07.12.2021")
        return

    async with state.proxy() as data:
        data['date_of_start'] = message.text

    await Anketa.next()
    await message.answer("üîª –°–º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏?\n"
                         "–ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ -> –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π.", reply_markup=can_continue_work)


@dp.message_handler(state=Anketa.can_continue_work)
async def process_can_continue_work(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['can_continue_work'] = message.text

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}", reply_markup=ReplyKeyboardRemove())
    await Anketa.next()
    await message.answer("üîª –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.\n"
                         "–ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ -> –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π:",
                         reply_markup=education)


@dp.message_handler(state=Anketa.education)
async def process_education(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['education'] = message.text

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}", reply_markup=ReplyKeyboardRemove())
    await Anketa.next()
    await message.answer("üîª –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:")


@dp.message_handler(state=Anketa.name_of_institution)
async def process_name_of_institution(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name_of_institution'] = message.text

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}", reply_markup=ReplyKeyboardRemove())
    await Anketa.next()
    await message.answer("üîª –ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: ")


@dp.message_handler(state=Anketa.year_of_receipt)
async def process_year_of_receipt(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['year_of_receipt'] = message.text

    await Anketa.next()
    await message.answer("üîª –ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ")


@dp.message_handler(state=Anketa.year_of_graduation)
async def process_year_of_graduation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['year_of_graduation'] = message.text

    await Anketa.next()
    await message.answer("üîª –§–∞–∫—É–ª—å—Ç–µ—Ç, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ")


@dp.message_handler(state=Anketa.faculty)
async def process_faculty(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['faculty'] = message.text

    await Anketa.next()
    await message.answer("üîª –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:")


@dp.message_handler(state=Anketa.average_score)
async def process_average_score(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['average_score'] = message.text

    await Anketa.next()
    await message.answer("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ", reply_markup=work_experience)


@dp.message_handler(state=Anketa.work_experience)
async def process_work_experience(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['work_experience'] = message.text

        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}", reply_markup=ReplyKeyboardRemove())
        await Anketa.next()
        await message.answer("–ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã —Å ... –¥–æ ...")


@dp.message_handler(state=Anketa.period_of_work)
async def process_period_of_work(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['period_of_work'] = message.text

    await Anketa.next()
    await message.answer("–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: ")


@dp.message_handler(state=Anketa.place_of_work)
async def process_place_of_work(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['place_of_work'] = message.text

    await Anketa.next()
    await message.answer("–î–æ–ª–∂–Ω–æ—Å—Ç—å: ")


@dp.message_handler(state=Anketa.post)
async def process_post(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['post'] = message.text

    await Anketa.next()
    await message.answer("–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: ")


@dp.message_handler(state=Anketa.duties)
async def process_duties(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['duties'] = message.text

    await Anketa.next()
    await message.answer("–í –∫–∞–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–ª —É—á–∞—Å—Ç–∏–µ (–≤–∫–ª—é—á–∞—è —É—á–µ–±–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã): ")


@dp.message_handler(state=Anketa.participation_in_projects)
async def process_participation_in_projects(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['participation_in_projects'] = message.text

    await Anketa.next()
    await message.answer("–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ —Ç—ã –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ—Ç Naumen? \n"
                         "–ï—Å–ª–∏ –¥–∞ - —Ä–∞—Å—Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ: ")


@dp.message_handler(state=Anketa.participation_in_educational_programs)
async def process_participation_in_educational_programs(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['participation_in_educational_programs'] = message.text

    await Anketa.next()
    await message.answer("üîª –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏: ")


@dp.message_handler(state=Anketa.main_skills)
async def process_main_skills(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['main_skills'] = message.text

    await Anketa.next()
    await message.answer("üîª –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: ")


@dp.message_handler(state=Anketa.professional_interests)
async def process_professional_interests(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['professional_interests'] = message.text

    await Anketa.next()
    await message.answer("üîª –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–Ω–∏–≥–∞: ")


@dp.message_handler(state=Anketa.last_professional_book)
async def process_last_professional_boot(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last_professional_book'] = message.text

    await Anketa.next()
    await message.answer("üîª –ö–∞–∫ —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è? –ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è? ")


@dp.message_handler(state=Anketa.hobby)
async def process_hobby(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['hobby'] = message.text

    await Anketa.next()
    await message.answer("üîª –ß—Ç–æ –¥–∞—Å—Ç —Ç–µ–±–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏? ")


@dp.message_handler(state=Anketa.result_of_practice)
async def process_result_of_practice(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['result_of_practice'] = message.text

    await Anketa.next()
    await message.answer("üîª –ö–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å —á–µ—Ä–µ–∑ 3-5 –ª–µ—Ç: ")


@dp.message_handler(state=Anketa.want_post)
async def process_want_post(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['want_post'] = message.text

    await Anketa.next()
    await message.answer("üîª –ö–∞–∫ —Ç—ã —É–∑–Ω–∞–ª –æ –∫–æ–º–ø–∞–Ω–∏–∏ NAUMEN? ",
                         reply_markup=find_out_about_naumen)


@dp.message_handler(state=Anketa.find_out_about_naumen)
async def process_find_out_about_naumen(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['find_out_about_naumen'] = message.text

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}", reply_markup=ReplyKeyboardRemove())
    await Anketa.next()
    await message.answer("üîª –ö–∞–∫ —Ç—ã —É–∑–Ω–∞–ª –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ NAUMEN? ",
                         reply_markup=find_out_about_naumen)


@dp.message_handler(state=Anketa.find_out_about_internship)
async def process_find_out_about_internship(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['find_out_about_internship'] = message.text

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}", reply_markup=ReplyKeyboardRemove())
    await Anketa.next()
    await message.answer("üîª –ö—Ç–æ –º–æ–∂–µ—Ç –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏? (–§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, —Ç–µ–ª–µ—Ñ–æ–Ω) ")


@dp.message_handler(state=Anketa.recommendation)
async def process_recommendation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['recommendation'] = message.text

    await Anketa.next()
    await message.answer("üîª –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ: ")


@dp.message_handler(state=Anketa.resume)
async def process_resume(message: types.Message, state: FSMContext):
    resume = message.text
    if not re.match(
            r"^((ftp|http|https):\/\/)?(www\.)?([A-Za-z–ê-–Ø–∞-—è0-9]{1}[A-Za-z–ê-–Ø–∞-—è0-9\-]*\.?)*\.{1}[A-Za-z–ê-–Ø–∞-—è0-9-]{2,8}"
            r"(\/([\w#!:.?+=&%@!\-\/])*)?",
            resume):
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ. –ü–æ–ø—Ä–æ–±—É–π–µ –µ—â—ë —Ä–∞–∑")
        return

    async with state.proxy() as data:
        data['resume'] = message.text

    await Anketa.next()
    await message.answer("üîª –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ")


@dp.message_handler(state=Anketa.test_task)
async def process_resume(message: types.Message, state: FSMContext):
    test_task = message.text
    if not re.match(
            r"^((ftp|http|https):\/\/)?(www\.)?([A-Za-z–ê-–Ø–∞-—è0-9]{1}[A-Za-z–ê-–Ø–∞-—è0-9\-]*\.?)*\.{1}[A-Za-z–ê-–Ø–∞-—è0-9-]{2,8}"
            r"(\/([\w#!:.?+=&%@!\-\/])*)?",
            test_task):
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç –µ—â—ë —Ä–∞–∑")
        return

    async with state.proxy() as data:
        data['test_task'] = message.text

    await Anketa.next()
    await message.answer(
        md.text(
            md.text("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞, ", data['lastname']),
            md.text('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ', data['direction']),
            md.text('–§–∞–º–∏–ª–∏—è: ', data['lastname']),
            md.text('–ò–º—è: ', data['firstname']),
            md.text('–û—Ç—á–µ—Å—Ç–≤–æ: ', data['patronymic']),
            md.text('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ', data['date_of_birth']),
            md.text('–ì–æ—Ä–æ–¥: ', data['city']),
            md.text('E-mail: ', data['email']),
            md.text('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ', data['email']),
            md.text('–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é —Å–º–æ–∂–µ—à—å —É–¥–µ–ª—è—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ: ', data['hours_per_week']),
            md.text('–ö–æ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ: ', data['date_of_start']),
            md.text('–°–º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏: ', data['can_continue_work']),
            md.text("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ", data['education']),
            md.text("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è: ", data['name_of_institution']),
            md.text("–ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: ", data['year_of_receipt']),
            md.text("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: ", data['year_of_graduation']),
            md.text("–§–∞–∫—É–ª—å—Ç–µ—Ç, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ", data['faculty']),
            md.text("–°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª: ", data['average_score']),
            md.text("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ", data['work_experience']),
            md.text("–ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã —Å ... –¥–æ ... : ", data['period_of_work']),
            md.text("–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: ", data['place_of_work']),
            md.text("–î–æ–ª–∂–Ω–æ—Å—Ç—å: ", data['post']),
            md.text("–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: ", data['duties']),
            md.text("–í –∫–∞–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø—Ä–∏–Ω–∏–º–∞–ª —É—á–∞—Å—Ç–∏–µ (–≤–∫–ª—é—á–∞—è —É—á–µ–±–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã): ",
                    data['participation_in_projects']),
            md.text("–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ—Ç NAUMEN: ",
                    data['participation_in_educational_programs']),
            md.text("–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏: ", data['main_skills']),
            md.text("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: ", data['professional_interests']),
            md.text("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–Ω–∏–≥–∞: ", data['last_professional_book']),
            md.text("–ö–∞–∫ —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è? –ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è? ", data['hobby']),
            md.text("–ß—Ç–æ –¥–∞—Å—Ç —Ç–µ–±–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏? ", data['result_of_practice']),
            md.text("–ö–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å —á–µ—Ä–µ–∑ 3-5 –ª–µ—Ç? ", data['want_post']),
            md.text("–ö–∞–∫ —Ç—ã —É–∑–Ω–∞–ª –æ –∫–æ–º–ø–∞–Ω–∏–∏ NAUMEN?", data['find_out_about_naumen']),
            md.text("–ö–∞–∫ —Ç—ã —É–∑–Ω–∞–ª –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ NAUMEN? ", data['find_out_about_internship']),
            md.text("–ö—Ç–æ –º–æ–∂–µ—Ç –¥–∞—Ç—å —Ç–µ–±–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é? ", data['recommendation']),
            md.text("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ: ", data['resume']),
            md.text("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ", data['test_task']),
            sep='\n',
        ),
        parse_mode=ParseMode.MARKDOWN
    )
    await message.answer("üîª –ù–∞–ø–∏—à–∏—Ç–µ \"–î–∞\" –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã: ")


@dp.message_handler(state=Anketa.confirm)
async def process_confirm(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['confirm'] = message.text

    if data['confirm'] == "–¥–∞".lower():
        result = []
        values = []
        for el in data.values():
            values.append(el)

        result.append(values)
        #
        # sheet.values().append(spreadsheetId=SAMPLE_SPREADSHEET_ID,
        #                       range="Sheet2!A2", valueInputOption="RAW",
        #                       body={"values": result}).execute()
        # await state.finish()
        await message.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. :) ", parse_mode='Markdown')
    else:
        await state.finish()
        await message.answer("–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
